{"version":3,"sources":["redux/storeConstants.js","redux/reducers/user.js","redux/reducers/game.js","redux/reducers/invitation.js","redux/store.js","redux/actionConstants.js","components/game/Cell.js","components/game/Board.js","redux/actions/gameActions.js","client.js","redux/actions/connectActions.js","components/Loading.js","components/login/LoginPage.js","components/login/SignUpPage.js","components/InvalidPage.js","components/game/GameOptions.js","components/game/PlayerIcon.js","components/game/Game.js","components/onboarding/Slide.js","components/onboarding/SlideIndicator.js","components/onboarding/OnboardingSlides.js","components/lobby/Player.js","components/lobby/OnlinePlayers.js","components/lobby/SendRequest.js","components/lobby/InvatationNotification.js","components/lobby/Notification.js","components/lobby/SystemNotification.js","components/lobby/Intro.js","components/lobby/Lobby.js","components/lobby/Menu.js","components/Header.js","views/App.js","serviceWorker.js","index.js"],"names":["LOGIN_STATE","SIGN_UP_STATE","PAGE","GAME","PLAYER_STATUS","INVITATION_STATUS","INITIAL_STATE","user","loginStatus","registerStatus","page","existingUsernames","onlinePlayers","notifications","height","width","mines","status","board","pair","color","pairColor","invitationTo","invitationFrom","rootReducer","combineReducers","state","action","type","payload","onboardingComplete","players","win","lose","game","invitation","createStore","applyMiddleware","thunkMiddleware","Cell","props","border","value","className","isRevealed","isFlagged","isMine","onClick","onContextMenu","icon","faBomb","style","fontSize","neighbor","faFlag","flagColor","createEmptyArray","newBoard","i","push","j","x","y","isEmpty","plantMines","randX","randY","minesPlanted","getRand","getNeighbors","mine","traverseBoard","forEach","cur","val","Math","floor","random","Board","self","useSelector","username","dispatch","useDispatch","getTypes","arr","row","item","revealBoard","handleWin","sendNewBoard","setGameWin","setGameLose","handleClick","handleLose","revealEmpty","length","handleContextMenu","e","preventDefault","newMines","mineArr","flagArr","JSON","stringify","sendNewMines","map","key","getNewBoard","initBoard","store","getState","updateBoard","updateMines","player","sendWinStatusToServer","sendLoseStatusToServer","host","socket","require","connect","secure","console","log","on","message","updatePlayers","updateNotifications","response","loginResponse","acceptedInvitation","declinedInvitation","setTimeout","closedInvitation","receivedInvitation","setPage","setgameClosed","newStatus","emit","setGameBoard","setGameMines","setGameStatus","setGameColor","requestLogin","password","joinLobby","loggedOut","logout","setLogoutToServer","requestRegister","registerReponse","register","requestAllUsernames","allUsernames","getAllUsernames","sendInvitation","requestedInvitation","waitForResponse","sendInvitationToServer","acceptInvitation","acceptInvitationToServer","declineInvitation","declineInvitationToServer","startGame","startGameToServer","releaseInvitation","releaseInvitationToServer","closeGame","updatedOnboardingStatus","setOnboarding","setOnboardingToServer","Loading","loginState","Modal","centered","isOpen","ModalBody","Spinner","size","beginEdit","Login","useState","EMPTY","setUsername","setPassword","showAlert","setShowAlert","canLogin","handleSubmit","useEffect","timer","ALERT_MSG_TIME","clearTimeout","handleLogin","handleKeyPress","event","keyCode","Card","Header","Body","Row","Col","sm","Alert","variant","handleAlert","md","xs","Input","id","name","onKeyUp","aria-label","placeholder","onChange","target","Footer","Button","disabled","block","isExisting","includes","SignUpPage","password1","setPassword1","password2","setPassword2","canSignUp","handleSignUp","xl","lg","valid","invalid","FormFeedback","InvalidPage","GameOptions","ModalFooter","PlayerIcon","display","margin","textAlign","Game","Slide","slideStatus","children","SlideIndicator","clickHandler","OnboardingSlides","activeSlide","setActiveSlide","setSlideState","slideId","src","process","alt","indicators","slideID","generateSlideIndicators","Player","invite","displayAction","OnlinePlayers","CardHeader","tag","Table","Object","keys","index","SendRequest","invitationStatus","ModalHeader","displayContent","InvatationNotification","Notification","notification","Date","time","toLocaleString","CardBody","content","SystemNotification","body","outline","Badge","CardColumns","sort","a","b","getSortedNotifications","Intro","offset","faStar","faTrophy","Lobby","Menu","dropdownOpen","setDropdownOpen","Dropdown","toggle","prevState","DropdownToggle","caret","faBars","DropdownMenu","DropdownItem","faInfo","divider","faUser","align","App","LoginPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a5e5947.chunk.js","sourcesContent":["export const LOGIN_STATE = {\n    LOGIN_REQUESTED: \"login requested\",\n    LOGGED_IN: \"logged in\",\n    LOGGED_OUT: \"logged out\",\n    ALREADY_LOGGED_IN: \"already logged in\",\n    LOGGED_NON_EXIST_USER_FAILURE: \"logged non exist user failure\",\n    LOGGED_INVALID_PASSWORD_FAILURE: \"logged invalid password failure\",\n    NETWORK_ERROR: \"network error\"\n};\n\nexport const SIGN_UP_STATE = {\n    SIGNED_UP_CLOSED: \"signed up closed\",\n    SIGNED_UP_SUCCESS: \"signed up success\",\n    SIGNED_UP_ADD_FAILURE: \"signed up add failure\",\n    SIGNED_UP_EXIST_FAILURE: \"signed up exist failure\",\n    SIGNED_UP_REQUESTED: \"signed up requested\",\n    NETWORK_ERROR: \"network error\"\n};\n\nexport const STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAIL: \"fail\"\n};\n\nexport const PAGE = {\n    LOGIN: \"log in\",\n    SIGN_UP: \"sign up\",\n    INVALID: \"invalid\",\n    LOBBY: \"lobby\",\n    GAME: \"game\"\n};\n\nexport const GAME = {\n    LOSE: \"lose\",\n    WIN: \"win\",\n    IN_PROGRESS: \"in progress\"\n};\n\nexport const PLAYER_STATUS = {\n    AVAILABLE: \"Available\",\n    PENDING: \"Pending\",\n    IN_GAME: \"In a game\",\n}\n\nexport const INVITATION_STATUS = {\n    CONNECT_TO_SERVER: \"Connect to server\",\n    WAIT_FOR_RESPONSE: \"Wait for response\",\n    RECEIVE_INVITATION: \"Receive invitation\",\n    INVITATION_ACCEPTED: \"Invitation accepted\",\n    INVITATION_DECLINED: \"Invitation declined\"\n}\n","import { REQUEST_TO_LOGIN, LOGIN_RESPONSE, REQUEST_TO_REGISTER, REGISTER_RESPONSE, \n   GET_ALL_USERNAMES, SET_PAGE, UPDATE_PLAYERS, LOGOUT, SET_ONBOARDING_STATUS, \n   UPDATE_NOTIFICATIONS, UPDATE_WIN, UPDATE_LOSE } from \"../actionConstants\";\nimport { LOGIN_STATE, PAGE, SIGN_UP_STATE } from \"../storeConstants\";\n\nconst INITIAL_STATE = {\n   user: {},\n   loginStatus: LOGIN_STATE.LOGGED_OUT,\n   registerStatus: SIGN_UP_STATE.SIGNED_UP_CLOSED,\n   page: PAGE.LOGIN,\n   existingUsernames: [],\n   onlinePlayers: {},\n   notifications: []\n}\n\nexport const userReducer = (state = INITIAL_STATE, action) => {\n   switch (action.type) {\n      case REQUEST_TO_LOGIN: {\n         return {\n            ...state,\n            loginStatus: LOGIN_STATE.LOGIN_REQUESTED\n         }\n      }\n      case LOGIN_RESPONSE: {\n         return {\n            ...state,\n            user: action.payload.user,\n            loginStatus: action.payload.loginStatus,\n            page: action.payload.page,\n            registerStatus: SIGN_UP_STATE.SIGNED_UP_CLOSED\n         }\n      }\n      case SET_ONBOARDING_STATUS: {\n         return {\n            ...state,\n            user: {\n               ...state.user,\n               onboardingComplete: action.payload\n            }\n         }\n      }\n      case REQUEST_TO_REGISTER: {\n         return {\n            ...state,\n            registerStatus: SIGN_UP_STATE.SIGNED_UP_REQUESTED\n         }\n      }\n      case REGISTER_RESPONSE: {\n         return {\n            ...state,\n            registerStatus: action.payload.registerStatus\n         }\n      }\n      case GET_ALL_USERNAMES: {\n         return {\n            ...state,\n            existingUsernames: action.payload.existingUsernames\n         }\n      }\n      case SET_PAGE: {\n         return {\n            ...state,\n            page: action.payload.page\n         }\n      }\n      case UPDATE_PLAYERS: {\n         return {\n            ...state,\n            onlinePlayers: action.payload.players\n         }\n      }\n      case UPDATE_NOTIFICATIONS: {\n         return {\n            ...state,\n            notifications: action.payload.notifications\n         }\n      }\n      case LOGOUT: {\n         return INITIAL_STATE;\n      }\n      case UPDATE_WIN: {\n         return {\n            ...state,\n            user: {\n               ...state.user,\n               win: state.user.win + 1\n            }\n         }\n      }\n      case UPDATE_LOSE: {\n         return {\n            ...state,\n            user: {\n               ...state.user,\n               lose: state.user.lose + 1\n            }\n         }\n      }\n      default:\n         return state;\n   }\n}\n\n\n\n\n// import {\n//    LOGIN_SUCCESS, ADD_TIME_ID, STORE_USER_LIST, LOGOUT, \n//    CLEAN_TIME_ID, SET_STATUS, SET_PAGE, SET_ALL_MESSAGES,\n//    SET_CONNECTED, SET_CLIENT_ID\n// } from \"../actionConstants\";\n// import { PAGE } from \"../storeConstants\";\n\n// // export const INITIAL_STATE = {\n// //    username: \"\",\n// //    timeIds: [],\n// //    userList: [],\n// //    page: PAGE.LOGIN,\n// // }\n\n// export const INITIAL_STATE = {\n//    username: \"user\",\n//    timeIds: [],\n//    userList: [{\n//       username: \"user\",\n//       password: \"user\"\n//    }],\n//    page: PAGE.GAME,\n//    isConnected: true,\n//    messages: [],\n//    clientID: \"\",\n// }\n\n// export const userReducer = (state=INITIAL_STATE, action) => {\n//    console.log(\"action type: \" + action.type);\n//    // console.log(\"action load: \" + JSON.stringify(action.payload));\n//    switch(action.type) {\n//       case LOGIN_SUCCESS:\n//          return {\n//             ...INITIAL_STATE,\n//             username: action.payload.username\n//          };\n//       case LOGOUT:\n//          return {\n//             ...INITIAL_STATE,\n//             page: PAGE.LOGIN,\n//             userList: state.userList\n//          };\n//       case ADD_TIME_ID:\n//          return {\n//             ...state,\n//             timeIds: action.payload.timeIds\n//          }\n//       case CLEAN_TIME_ID:\n//          return {\n//             ...state,\n//             timeIds: []\n//          }\n//       case SET_STATUS:\n//          return {\n//             ...state,\n//             status: action.payload.status\n//          }\n//       case SET_PAGE:\n//          return {\n//             ...state,\n//             page: action.payload.page\n//          }\n//       case STORE_USER_LIST:\n//          return {\n//             ...state,\n//             userList: [\n//                ...action.payload.userList\n//             ]\n//          }\n//       case SET_ALL_MESSAGES:\n//          return {\n//             ...state,\n//             messages: action.payload.messages\n//          }\n//       case SET_CONNECTED:\n//          return {\n//             ...state,\n//             isConnected: true\n//          }\n//       case SET_CLIENT_ID:\n//          return {\n//             ...state,\n//             clientID: action.payload.clientID\n//          }\n//       default:\n//          return state;\n//       }\n// };","import { GAME } from \"../storeConstants\";\nimport {\n   SET_GAME_STATUS, SET_GAME_MINES, SET_GAME_BOARD, \n   SET_GAME_PAIR, UPDATE_WIN, UPDATE_LOSE, GAME_OVER,\n   SET_GAME_COLOR, SET_GAME_PAIR_COLOR \n} from \"../actionConstants\";\n\nexport const INITIAL_STATE = {\n   height: 8,\n   width: 8,\n   mines: 10,\n   status: GAME.IN_PROGRESS,\n   board: [],\n   pair: \"\",\n   color: \"\",\n   pairColor: \"\"\n};\n\nexport const gameReducer = (state=INITIAL_STATE, action) => {\n   switch(action.type) {\n      case SET_GAME_STATUS:\n         return {\n            ...state,\n            status: action.payload.status\n         };\n      case UPDATE_WIN:\n         return {\n            ...state,\n            status: GAME.WIN\n         }\n      case UPDATE_LOSE:\n         return {\n            ...state,\n            status: GAME.LOSE\n         }\n      case SET_GAME_MINES:\n         return {\n            ...state,\n            mines: action.payload.mines\n         }\n      case SET_GAME_BOARD:\n         return {\n            ...state,\n            board: action.payload.board\n         }\n      case SET_GAME_PAIR:\n         return {\n            ...state,\n            pair: action.payload.pair\n         }\n      case SET_GAME_COLOR:\n         return {\n            ...state,\n            color: action.payload.color\n         }\n      case SET_GAME_PAIR_COLOR:\n         return {\n            ...state,\n            pairColor: action.payload.pairColor\n         }\n      case GAME_OVER:\n         return INITIAL_STATE\n      default:\n         return state;\n   };\n};","import { INVITATION_SEND_TO_SERVER, WAIT_FOR_RESPONSE, RECEIVE_INVITATION, INVITATION_ACCEPTED, INVITATION_DECLINED, CLOSE_INVITATION } from \"../actionConstants\";\nimport { INVITATION_STATUS } from \"../storeConstants\";\n\nconst INITIAL_STATE = {\n    invitationTo: null,\n    invitationFrom: null,\n    status: null\n}\n\nexport const invitationReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case INVITATION_SEND_TO_SERVER:\n            return {\n                ...state,\n                invitationFrom: action.payload.invitationFrom,\n                invitationTo: action.payload.invitationTo,\n                status: INVITATION_STATUS.CONNECT_TO_SERVER\n            }\n        case WAIT_FOR_RESPONSE:\n            return {\n                ...state,\n                status: INVITATION_STATUS.WAIT_FOR_RESPONSE\n            }\n        case RECEIVE_INVITATION:\n            return {\n                ...state,\n                invitationFrom: action.payload.invitationFrom,\n                invitationTo: action.payload.invitationTo,\n                status: INVITATION_STATUS.RECEIVE_INVITATION\n            }\n        case INVITATION_ACCEPTED:\n            return {\n                ...state,\n                status: INVITATION_STATUS.INVITATION_ACCEPTED\n            }\n        case INVITATION_DECLINED:\n            return {\n                ...state,\n                status: INVITATION_STATUS.INVITATION_DECLINED\n            }\n        case CLOSE_INVITATION:\n            return {\n                ...INITIAL_STATE\n            }\n        default:\n            return state;\n    }\n}","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { userReducer } from \"./reducers/user\";\nimport { gameReducer } from \"./reducers/game\";\nimport { invitationReducer } from \"./reducers/invitation\"\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    game: gameReducer,\n    invitation: invitationReducer\n})\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","// login request\nexport const REQUEST_TO_LOGIN = \"REQUEST_TO_LOGIN\";\nexport const LOGIN_RESPONSE = \"LOGIN_RESPONSE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SET_ONBOARDING_STATUS = \"SET_ONBOARDING_STATUS\";\nexport const SET_PAGE = \"SET_PAGE\";\n\n// register request\nexport const GET_ALL_USERNAMES = \"GET_ALL_USERNAMES\";\nexport const REQUEST_TO_REGISTER = \"REQUEST_TO_REGISTER\";\nexport const REGISTER_RESPONSE = \"REGISTER_RESPONSE\";\n\n// lobby request\nexport const UPDATE_ONLINE_PLAYERS = \"UPDATE_ONLINE_PLAYERS\";\nexport const INVITATION_SEND_TO_SERVER = \"INVITATION_SEND_TO_SERVER\";\nexport const RECEIVE_INVITATION = \"RECEIVE_INVITATION\";\nexport const WAIT_FOR_RESPONSE = \"WAIT_FOR_RESPONSE\";\nexport const INVITATION_ACCEPTED = \"INVITATION_ACCEPTED\";\nexport const INVITATION_DECLINED = \"INVITATION_DECLINED\";\nexport const CLOSE_INVITATION = \"CLOSE_INVITATION\";\nexport const UPDATE_PLAYERS = \"UPDATE_PLAYERS\";\nexport const UPDATE_NOTIFICATIONS = \"UPDATE_NOTIFICATIONS\";\n\n// game update\nexport const UPDATE_WIN = \"UPDATE_WIN\";\nexport const UPDATE_LOSE = \"UPDATE_LOSE\";\nexport const GAME_OVER = \"GAME_OVER\";\nexport const SET_STATUS = \"SET_STATUS\";\nexport const SET_GAME_STATUS = \"SET_GAME_STATUS\";\nexport const SET_GAME_MINES = \"SET_GAME_MINES\";\nexport const SET_GAME_BOARD = \"SET_GAME_BOARD\";\nexport const SET_GAME_PAIR = \"SET_GAME_PAIR\";\nexport const SET_GAME_COLOR = \"SET_GAME_COLOR\";\nexport const SET_GAME_PAIR_COLOR = \"SET_GAME_PAIR_COLOR\";","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBomb } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFlag } from \"@fortawesome/free-regular-svg-icons\";\n\nconst Cell = props => {\n   const border = props.value.color === \"\" ? \"\" : \"border-\" + props.value.color;\n\n   const getValue = () => {\n      if (!props.value.isRevealed) {\n         return props.value.isFlagged ? \n         <FontAwesomeIcon \n            icon={faFlag} \n            className={\"fa-flag-\" + props.value.flagColor}\n            style={{ \n               fontSize: \"1.7rem\", \n            }}/> \n         : null;\n      } else if (props.value.isMine) {\n         return <FontAwesomeIcon icon={faBomb} style={{ fontSize: \"1.7rem\", color:\"black\"}}/>\n      } else if (props.value.neighbor === 0) {\n         return null;\n      } else {\n         return props.value.neighbor;\n      }\n   }\n\n   const classNames = () => {\n      if (!props.value.isRevealed && props.value.isFlagged) {\n         return \"cell hidden\";\n      }\n      return \"cell\" +\n      (props.value.isRevealed ? \"\" : \" hidden\") +\n      (props.value.isMine ? \" is-mine\" : \"\") +\n      (props.value.isFlagged ? \" is-flag\" : \"\");\n   };\n\n   return (\n      <div \n         className={classNames() + \" \" + border}\n         onClick={props.onClick}\n         onContextMenu={props.onContextMenu}\n      >\n         {getValue()}\n      </div>\n   );\n};\n\nexport default Cell;","import React, {  } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Cell from \"./Cell\";\nimport { sendNewMines, sendNewBoard, setGameWin, setGameLose } from \"../../redux/actions/gameActions\";\n\nexport const initBoard = (width, height, mines) => {\n   let newBoard = createEmptyArray(width, height);\n   newBoard = plantMines(width, height, mines, newBoard);\n   newBoard = getNeighbors(width, height, newBoard);\n   return newBoard;\n};\n\nexport const createEmptyArray = (width, height) => {\n   let newBoard = [];\n   for (let i = 0; i < height; i++) {\n      newBoard.push([]);\n      for (let j = 0; j < width; j++) {\n         newBoard[i][j] = {\n            x: i,\n            y: j,\n            isMine: false,\n            neighbor: 0,\n            isRevealed: false,\n            isEmpty: false,\n            isFlagged: false,\n            color: \"\", \n            flagColor: \"\"\n         };\n      }\n   }\n   return newBoard;\n};\n\nexport const plantMines = (width, height, mines, newBoard) => {\n   let randX = 0;\n   let randY = 0;\n   let minesPlanted = 0;\n   while (minesPlanted < mines) {\n      randX = getRand(width);\n      randY = getRand(height);\n      // console.log(JSON.stringify(newBoard));\n      if (!newBoard[randX][randY].isMine) {\n         newBoard[randX][randY].isMine = true;\n         minesPlanted++;\n      }\n   }\n   return newBoard;\n};\n\nexport const getNeighbors = (width, height, newBoard) => {\n   for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n         if (!newBoard[i][j].isMine) {\n            let mine = 0;\n            const area = traverseBoard(width, height, newBoard[i][j].x, newBoard[i][j].y, newBoard);\n            area.forEach(value => {\n               if (value.isMine) {\n                  mine++;\n               }\n            });\n            if (mine === 0) {\n               newBoard[i][j].isEmpty = true;\n            }\n            newBoard[i][j].neighbor = mine;\n         }\n      }\n   }\n   return newBoard;\n};\n\nexport const traverseBoard = (width, height, x, y, newBoard) => {\n   const cur = [];\n   if (x > 0) {\n      cur.push(newBoard[x - 1][y]);\n   }\n   if (x < height - 1) {\n      cur.push(newBoard[x + 1][y]);\n   }\n   if (y > 0) {\n      cur.push(newBoard[x][y - 1]);\n   }\n   if (y < width - 1) {\n      cur.push(newBoard[x][y + 1]);\n   }\n   if (x > 0 && y > 0) {\n      cur.push(newBoard[x - 1][y - 1]);\n   }\n   if (x > 0 && y < width - 1) {\n      cur.push(newBoard[x - 1][y + 1]);\n   }\n   if (x < height - 1 && y < width - 1) {\n      cur.push(newBoard[x + 1][y + 1]);\n   }\n   if (x < height - 1 && y > 0) {\n      cur.push(newBoard[x + 1][y - 1]);\n   }\n   return cur;\n};\n\nexport const getRand = (val) => {\n   return Math.floor((Math.random() * 1000 + 1) % val);\n};\n\nconst Board = () => {\n   const self = useSelector(state => state.user.user.username);\n   const mines = useSelector(state => state.game.mines);\n   const board = useSelector(state => state.game.board);\n   const pair = useSelector(state => state.game.pair);\n   const width = useSelector(state => state.game.width);\n   const height = useSelector(state => state.game.height);\n   const color = useSelector(state => state.game.color);\n   const dispatch = useDispatch();\n\n   const getTypes = (type, newBoard) => {\n      let arr = [];\n      newBoard.forEach(row => {\n          row.forEach(item => {\n              if ((type === \"mine\" && item.isMine) ||\n                  (type === \"flag\" && item.isFlagged) ||\n                  (type === \"hide\" && !item.isRevealed)) {\n                  arr.push(item);\n              }\n          });\n      });\n      return arr;\n   };\n\n   const renderBoard = () => {\n      return board.map((row) => {\n         return row.map((item) => {\n            return (\n               <div key={item.x * row.length + item.y}>\n                  <Cell onClick={() => handleClick(item.x, item.y)}\n                        onContextMenu={(e) => handleContextMenu(e, item.x, item.y)}\n                        value={item}\n                  />\n                  {(row[row.length - 1] === item) ? <div/> : \"\"}\n               </div>\n            )\n         })\n      })\n   };\n\n   const revealBoard = (newBoard) => {\n      newBoard.forEach(row => {\n         row.forEach(item => {\n            item.isRevealed = true;\n         });\n      });\n      return newBoard;\n   };\n\n   const handleWin = newBoard => {\n      dispatch(sendNewBoard(newBoard));\n      dispatch(setGameWin(self));\n      dispatch(setGameLose(pair));\n   }\n\n   const handleLose = newBoard => {\n      dispatch(sendNewBoard(newBoard));\n      dispatch(setGameLose(self));\n      dispatch(setGameWin(pair));\n   }\n\n   const handleClick = (x, y) => {\n      if (board[x][y].isRevealed || board[x][y].isFlagged) {\n         return null;\n      }\n      let newBoard = [...board];\n      if (newBoard[x][y].isMine) {\n         newBoard = revealBoard(newBoard);\n         return handleLose(newBoard);\n      }\n      newBoard[x][y].isFlagged = false;\n      newBoard[x][y].isRevealed = true;\n      newBoard[x][y].color = color;\n      if (newBoard[x][y].isEmpty) {\n         newBoard = revealEmpty(x, y, newBoard);\n      }\n      if (getTypes(\"hide\", newBoard).length === mines) {\n         newBoard = revealBoard(newBoard);\n         return handleWin(newBoard);\n      }\n      dispatch(sendNewBoard(newBoard));\n      // renderBoard(newBoard);\n   };\n\n   const revealEmpty = (x, y, newBoard) => {\n      let area = traverseBoard(width, height, x, y, newBoard);\n      area.forEach(value => {\n         if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n            newBoard[value.x][value.y].isRevealed = true;\n            if (value.isEmpty) {\n               revealEmpty(value.x, value.y, newBoard);\n            }\n         }\n      });\n      return newBoard;\n   };\n\n   const handleContextMenu = (e, x, y) => {\n      e.preventDefault();\n      let newMines = mines;\n      let newBoard = [...board];\n      if (newBoard[x][y].isRevealed) {\n         return;\n      }\n      if (newBoard[x][y].isFlagged) {\n         newBoard[x][y].isFlagged = false;\n         newBoard[x][y].flagColor = \"\";\n         newMines++;\n      } else if (newMines > 0) {\n         newBoard[x][y].isFlagged = true;\n         newBoard[x][y].flagColor = color;\n         newMines--;\n      }\n      if (newMines === 0) {\n         const mineArr = getTypes(\"mine\", newBoard);\n         const flagArr = getTypes(\"flag\", newBoard);\n         if (JSON.stringify(mineArr) === JSON.stringify(flagArr)) {\n            newBoard = revealBoard(newBoard);\n            return handleWin(newBoard);\n         }\n      }\n      dispatch(sendNewBoard(newBoard));\n      dispatch(sendNewMines(newMines));\n   };\n\n   return (\n      <div className=\"board\">\n         {renderBoard()}\n      </div>\n   );\n};\n\nexport default Board;","import { \n    SET_GAME_STATUS, SET_GAME_MINES,\n    SET_GAME_BOARD, SET_GAME_PAIR, UPDATE_WIN,\n    UPDATE_LOSE, SET_GAME_COLOR, SET_GAME_PAIR_COLOR\n} from \"../actionConstants\";\nimport store from \"../store\";\nimport { updateBoard, updateMines, updatePairStatus, sendWinStatusToServer,\n    sendLoseStatusToServer } from \"../../client\";\nimport { initBoard } from \"../../components/game/Board\";\n\n\n/** Game **/\nexport const setGameStatus = status => ({\n    type: SET_GAME_STATUS,\n    payload: {\n        status\n    }\n});\n\nexport const setGameMines = mines => ({\n    type: SET_GAME_MINES,\n    payload: {\n        mines\n    }\n});\n\nexport const setGameBoard = board => ({\n    type: SET_GAME_BOARD,\n    payload: {\n        board\n    }\n});\n\nexport const getNewBoard = () => {\n    const width = store.getState().game.width;\n    const height = store.getState().game.height;\n    const mines = store.getState().game.mines;\n    return initBoard(width, height, mines);\n};\n\nexport const sendNewBoard = newBoard => (\n    dispatch => updateBoard(newBoard)\n);\n\nexport const sendNewMines = newMines => (\n    dispatch => updateMines(newMines)\n);\n\nexport const sendPairStatus = newStatus => (\n    dispatch => updatePairStatus(newStatus)\n);\n\nexport const updateWinStatus = () => ({\n    type: UPDATE_WIN\n})\n\nexport const setGameWin = player => {\n    return dispatch => {\n        sendWinStatusToServer(player);\n    }\n};\n\nexport const updateLoseStatus = () => ({\n    type: UPDATE_LOSE\n});\n\nexport const setGameLose = player => {\n    return dispatch => {\n        sendLoseStatusToServer(player);\n    }\n};\n\nexport const setGamePair = pair => ({\n    type: SET_GAME_PAIR,\n    payload: {\n        pair\n    }\n});\n\nexport const setGameColor = color => ({\n    type: SET_GAME_COLOR,\n    payload: {\n        color\n    }\n});\n\nexport const setGamePairColor = pairColor => ({\n    type: SET_GAME_PAIR_COLOR,\n    payload: {\n        pairColor\n    }\n});","import store from \"./redux/store\";\nimport { \n    getNewBoard, setGameBoard, setGamePair, setGameMines, \n    setGameStatus, updateWinStatus, updateLoseStatus, \n    setGameColor, setGamePairColor \n} from \"./redux/actions/gameActions\";\nimport { \n    loginResponse, registerReponse, getAllUsernames, \n    waitForResponse, receivedInvitation, updatePlayers, \n    acceptedInvitation, declinedInvitation, setPage, \n    closedInvitation, loggedOut, updatedOnboardingStatus, \n    updateNotifications, setgameClosed\n} from \"./redux/actions/connectActions\";\nimport { PAGE } from \"../src/redux/storeConstants\";\n\n/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host = process.env.NODE_ENV === 'production' ?\n    \"minesweeper-7580.herokuapp.com\" : \"localhost:4002\"   \nlet socket = socketIOClient.connect(host, {secure: true});\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\n// Print out a notification from the server (for debuging)\nsocket.on(\"notification\", message => {\n    console.log(message);\n});\n\n// Request to get all existing usernames in the database\nexport const getUsernames = () => {\n    socket.emit(\"request all existing usernames\");\n\n    socket.on(\"all existing usernames\", allUsernames => {\n        store.dispatch(getAllUsernames(allUsernames));\n    })\n}\n\n// Update all online players information\nsocket.on(\"online players update\", players => {\n    store.dispatch(updatePlayers(players))\n})\n\n// Update notifications\nsocket.on(\"all notifications\", notifications => {\n    store.dispatch(updateNotifications(notifications));\n})\n\n\n// Request to login to join the game lobby\nexport const joinLobby = (username, password) => {\n    socket.emit(\"request to login\", username, password);\n}\n\nsocket.on(\"login response\", response => {\n    store.dispatch(loginResponse(response));\n});\n\n// Request to logout \nexport const setLogoutToServer = (username) => {\n    socket.emit(\"logout\", username);\n\n    socket.on(\"receive logout request\", () => {\n        store.dispatch(loggedOut());\n    })\n}\n\nexport const setOnboardingToServer = (username, status) => {\n    socket.emit(\"update onboarding status\", username, status);\n\n    socket.on(\"updated onboarding status\", () => {\n        store.dispatch(updatedOnboardingStatus(status));\n    })\n}\n\n// Request to register with valid username-pwd\nexport const register = (username, password) => {\n    socket.emit(\"request to register\", username, password);\n\n    socket.on(\"register response\", response => {\n        console.log(\"register\", response.registerStatus)\n        store.dispatch(registerReponse(response));\n    })\n}\n\n// Request game invitation to another player\nexport const sendInvitationToServer = (invitationFrom, invitationTo) => {\n    socket.emit(\"send game invitation\", invitationFrom, invitationTo);\n\n    socket.on(\"successfully sent invitation to receiver\", () => {\n        store.dispatch(waitForResponse());\n    })\n}\n\nsocket.on(\"invitation accepted\", () => {\n    store.dispatch(acceptedInvitation())\n})\n\nsocket.on(\"invitation declined\", () => {\n    store.dispatch(declinedInvitation())\n})\n\n// Invitation pending but one player is offline, default set to decline the request\nsocket.on(\"receiver offline\", () => {\n    store.dispatch(declinedInvitation());\n    setTimeout(() => store.dispatch(closedInvitation()), 1000);\n})\n\n// Receive game invitation from the sender\nsocket.on(\"receive invitation\", invitationFrom => {\n    store.dispatch(receivedInvitation(invitationFrom))\n})\n\n// The invitation receiver sent accept response to server\nexport const acceptInvitationToServer = invitationFrom => {\n    socket.emit(\"accept invitation\", invitationFrom);\n}\n\n// The invitation receiver sent declined response to server\nexport const declineInvitationToServer = invitationFrom => {\n    socket.emit(\"decline invitation\", invitationFrom)\n}\n\n// Send release invitation notice to server by declined invitation\nexport const releaseInvitationToServer = (invitationFrom, invitationTo) => {\n    socket.emit(\"release invitation\", invitationFrom, invitationTo);\n}\n\n// Release the player's invitation status\nsocket.on(\"invitation released\", () => {\n    store.dispatch(closedInvitation());\n})\n\n// Send start game notice to server by accepted invitation\nexport const startGameToServer = (invitationFrom, invitationTo) => {\n    socket.emit(\"start game\", invitationFrom, invitationTo);\n}\n\n// Start the game by changing to game page\nsocket.on(\"received start game request\", () => {\n    store.dispatch(closedInvitation());\n    store.dispatch(setPage(PAGE.GAME));\n})\n\n// Close the game by changing to lobby page\nexport const closeGameToServer = player => {\n    socket.emit(\"close game\", player);\n}\n\nsocket.on(\"received close game request\", () => {\n    store.dispatch(setgameClosed());\n    store.dispatch(setPage(PAGE.LOBBY));\n})\n\n// Pair up the two players\nsocket.on(\"set pair up\", player => {\n    store.dispatch(setGamePair(player));\n});\n\n\n// Get the initial board from one player\nsocket.on(\"get init board\", () => {\n    const newBoard = getNewBoard();\n    const newMines = store.getState().game.mines;\n    const newStatus = store.getState().game.status;\n    socket.emit(\"update pair board\", newBoard);\n    socket.emit(\"update pair mines\", newMines);\n    socket.emit(\"update pair status\", newStatus);\n});\n\n// Set the pair player's board\nsocket.on(\"set pair board\", board => {\n    store.dispatch(setGameBoard(board));\n});\n\n// Set the pair player's mine locations\nsocket.on(\"set pair mines\", mines => {\n    store.dispatch(setGameMines(mines));\n});\n\n// Set the pair player's status\nsocket.on(\"set pair status\", status => {\n    store.dispatch(setGameStatus(status));\n});\n\n// Set the current player's color\nsocket.on(\"set current color\", color => {\n    store.dispatch(setGameColor(color));\n});\n\n// Set the pair player's color\nsocket.on(\"set pair color\", color => {\n    store.dispatch(setGamePairColor(color));\n});\n\n// Request to update pair player's board\nexport const updateBoard = board => {\n    socket.emit(\"update pair board\", board);\n};\n\n// Request to update pair player's mine locations\nexport const updateMines = mines => {\n    socket.emit(\"update pair mines\", mines);\n};\n\n// Request to update pair player's status\nexport const updatePairStatus = status => {\n    socket.emit(\"update pair status\", status);\n};\n\n// Request to update win status\nexport const sendWinStatusToServer = player => {\n    socket.emit(\"update win status\", player);\n}\n\nsocket.on(\"updated win status\", () => {\n    store.dispatch(updateWinStatus());\n})\n\nexport const sendLoseStatusToServer = player => {\n    socket.emit(\"update lose status\", player);\n}\n\nsocket.on(\"updated lose status\", () => {\n    store.dispatch(updateLoseStatus());\n})\n","import { REQUEST_TO_LOGIN, LOGIN_RESPONSE, REQUEST_TO_REGISTER, REGISTER_RESPONSE, \n    GET_ALL_USERNAMES, SET_PAGE, INVITATION_SEND_TO_SERVER, WAIT_FOR_RESPONSE, \n    RECEIVE_INVITATION, UPDATE_PLAYERS, INVITATION_ACCEPTED, INVITATION_DECLINED, \n    CLOSE_INVITATION, LOGOUT, SET_ONBOARDING_STATUS, UPDATE_NOTIFICATIONS, GAME_OVER } from \"../actionConstants\";\nimport { joinLobby, register, getUsernames, sendInvitationToServer,\n    acceptInvitationToServer, declineInvitationToServer,\n    startGameToServer, releaseInvitationToServer, setLogoutToServer,\n    setOnboardingToServer, closeGameToServer } from \"../../client\";\nimport store from \"../store\";\n\n/** Login **/\nconst requestedLogin = () => ({\n    type: REQUEST_TO_LOGIN\n})\n\nexport const requestLogin = (username, password) => {\n    return dispatch => {\n        dispatch(requestedLogin());\n        joinLobby(username, password);\n    }\n} \n\nexport const loginResponse = response => ({\n    type: LOGIN_RESPONSE,\n    payload: {\n        user: response.user,\n        loginStatus: response.loginStatus,\n        page: response.page\n    }\n})\n\nexport const loggedOut = () => ({\n    type: LOGOUT\n})\n\nexport const logout = username => {\n    return dispatch => {\n        setLogoutToServer(username);\n    }\n}\n\n/** Sign Up **/\nconst requestedRegister = () => ({\n    type: REQUEST_TO_REGISTER\n})\n\nexport const requestRegister = (username, password) => {\n    return dispatch => {\n        dispatch(requestedRegister());\n        register(username, password);\n    }\n}\n\nexport const registerReponse = response => ({\n    type: REGISTER_RESPONSE,\n    payload: {\n        registerStatus: response.registerStatus,\n    }\n})\n\nexport const requestAllUsernames = () => {\n    return dispatch => {\n        getUsernames();\n    }\n}\n\nexport const getAllUsernames = allUsernames => ({\n    type: GET_ALL_USERNAMES,\n    payload: {\n        existingUsernames: allUsernames\n    }\n})\n\nexport const updatePlayers = players => ({\n    type: UPDATE_PLAYERS,\n    payload: {\n        players\n    }\n})\n\nexport const updateNotifications = notifications => ({\n    type: UPDATE_NOTIFICATIONS,\n    payload: {\n        notifications\n    }\n})\n\nexport const setPage = page => ({\n    type: SET_PAGE,\n    payload: {\n        page\n    }\n})\n\n/** Invitation **/\nconst requestedInvitation = (invitationFrom, invitationTo) => ({\n    type: INVITATION_SEND_TO_SERVER,\n    payload: {\n        invitationFrom,\n        invitationTo\n    }\n})\n\nexport const sendInvitation = (invitationFrom, invitationTo) => {\n    return dispatch => {\n        dispatch(requestedInvitation(invitationFrom, invitationTo));\n        sendInvitationToServer(invitationFrom, invitationTo);\n    }\n}\n\nexport const waitForResponse = () => ({\n    type: WAIT_FOR_RESPONSE\n})\n\nexport const receivedInvitation = invitationFrom => {\n    const self = store.getState().user.user.username;\n    return ({\n        type: RECEIVE_INVITATION,\n        payload: {\n            invitationFrom: invitationFrom,\n            invitationTo: self\n        }\n    })\n}\n\nexport const acceptInvitation = invitationFrom => {\n    return dispatch => {\n        dispatch(acceptedInvitation());\n        acceptInvitationToServer(invitationFrom);\n    }\n}\n\nexport const declineInvitation = invitationFrom => {\n    return dispatch => {\n        dispatch(declinedInvitation());\n        declineInvitationToServer(invitationFrom);\n    }\n}\n\nexport const acceptedInvitation = () => ({\n    type: INVITATION_ACCEPTED\n})\n\nexport const declinedInvitation = () => ({\n    type: INVITATION_DECLINED\n})\n\nexport const closedInvitation = () => ({\n    type: CLOSE_INVITATION\n})\n\nexport const startGame = (invitationFrom, invitationTo) => {\n    return dispatch => {\n        startGameToServer(invitationFrom, invitationTo);\n    }\n}\n\nexport const releaseInvitation = (invitationFrom, invitationTo) => {\n    return dispatch => {\n        releaseInvitationToServer(invitationFrom, invitationTo);\n    }\n}\n\nexport const setgameClosed = () => ({\n    type: GAME_OVER\n})\n\nexport const closeGame = () => {\n    const self = store.getState().user.user.username;\n    return dispatch => {\n        closeGameToServer(self)\n    }\n}\n\nexport const updatedOnboardingStatus = status => ({\n    type: SET_ONBOARDING_STATUS,\n    payload: status\n})\n\nexport const setOnboarding = (username, status) => {\n    return dispatch => {\n        setOnboardingToServer(username, status);\n    }\n}\n\n\n\n\n\n\n\n","import React from \"react\";\nimport { Spinner, Modal, ModalBody } from \"reactstrap\";\nimport { useSelector } from \"react-redux\";\nimport { LOGIN_STATE } from \"../redux/storeConstants\";\n\nconst Loading = () => {\n    const loginState = useSelector(state => state.user.loginStatus);\n\n    return (\n        <Modal centered className=\"loading\" isOpen={loginState === LOGIN_STATE.LOGIN_REQUESTED}>\n            <ModalBody>\n                <Spinner className=\"spinner\" color=\"info\" size=\"xl\" />\n                <p>Verifying... please hold</p>\n            </ModalBody>\n        </Modal>\n    )\n}\n\n\nexport default Loading;","import React, { useState, useEffect } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { Input, Row, Col } from \"reactstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { requestLogin, setPage } from \"../../redux/actions/connectActions\";\nimport { LOGIN_STATE, PAGE } from \"../../redux/storeConstants\";\nimport { ALERT_MSG_TIME, EMPTY } from \"../../views/App\";\nimport Loading from \"../Loading\";\n\nlet beginEdit = false;\n\nconst Login = () => {\n   const [username, setUsername] = useState(EMPTY);\n   const [password, setPassword] = useState(EMPTY);\n   const [showAlert, setShowAlert] = useState(false);\n\n   const loginState = useSelector(state => state.user.loginStatus);\n   const dispatch = useDispatch();\n\n   let canLogin = username.length > 0 && password.length > 0;\n\n   const clearForm = () => {\n      beginEdit = false;\n      setUsername(EMPTY);\n      setPassword(EMPTY);\n   }\n\n   const handleSubmit = () => {\n      setShowAlert(true);\n      clearForm();\n   }\n\n   useEffect(() => {\n      if (showAlert) {\n         const timer = setTimeout(() => setShowAlert(false), ALERT_MSG_TIME);\n         return () => clearTimeout(timer);\n      }\n   }, [showAlert])\n\n   const handleLogin = () => {\n      dispatch(requestLogin(username, password))\n      handleSubmit();\n   }\n\n   const handleKeyPress = event => {\n      if (event.keyCode === 13) {\n         event.preventDefault();\n         handleLogin();\n      }\n   }\n\n   const handleAlert = () => {\n      console.log(loginState);\n      if (!beginEdit) {\n         if (loginState === LOGIN_STATE.NETWORK_ERROR) {\n            return (\n               <Alert variant=\"danger\">\n                  Unable to connect to the server! Please check your internet connection and try again.\n               </Alert>\n            );\n         } else if (loginState === LOGIN_STATE.LOGGED_NON_EXIST_USER_FAILURE) {\n            return (\n               <Alert variant=\"danger\">\n                  This user has not been signed up, please sign up with it or login with another user.\n               </Alert>\n            );\n         } else if (loginState === LOGIN_STATE.LOGGED_INVALID_PASSWORD_FAILURE) {\n            return (\n               <Alert variant=\"danger\">\n                  This password does not match with this user! Please try again.\n               </Alert>\n            );\n         } else if (loginState === LOGIN_STATE.LOGGED_IN) {\n            return (\n               <Alert variant=\"success\">\n                  Successfully logged in!\n               </Alert>\n            );\n         } else if (loginState === LOGIN_STATE.ALREADY_LOGGED_IN) {\n            return (\n               <Alert variant=\"danger\">\n                  Oooops! You've already logged in somewhere. \n               </Alert>\n            )\n         }\n      }\n   }\n\n   return (\n      <>\n      <Card className=\"margin-auto margin-top-4 login-width\">\n         <Card.Header className=\"text-center text-dark\">\n            <h1>Please sign in</h1>\n         </Card.Header>\n         <Card.Body>\n         {\n            showAlert &&\n            <Row className=\"margin-bottom-1\">\n               <Col sm={1}/>\n               <Col sm={10}>\n                  {handleAlert()}\n               </Col>\n               <Col sm={1} />\n            </Row>\n         }\n         <Row>\n            <Col md={1} xs={0}/>\n            <Col md={10} xs={12}>\n               <Input type=\"text\" id=\"username\"\n                        className=\"input-size\"\n                        name=\"username\" value={username}\n                        onKeyUp={e => handleKeyPress(e)}\n                        aria-label=\"input-username\"\n                        placeholder=\"Username\"\n                        onChange={e => {\n                           beginEdit = true;\n                           setUsername(e.target.value);\n                        }}\n               />\n            </Col>\n            <Col md={1} xs={0}/>\n         </Row>\n         <br />\n         <Row>\n            <Col md={1} xs={0}/>\n            <Col md={10} xs={12}>\n               <Input type=\"password\" id=\"password\"\n                        className=\"input-size\"\n                        name=\"password\" value={password}\n                        onKeyUp={e => handleKeyPress(e)}\n                        aria-label=\"input-password\"\n                        placeholder=\"Password\"\n                        onChange={e => {\n                           beginEdit = true;\n                           setPassword(e.target.value);\n                        }}\n               />\n            </Col>\n            <Col md={1} xs={0}/>\n         </Row>\n         </Card.Body>\n         <Card.Footer>\n         <Row>\n            <Col md={1} xs={0}/>\n            <Col md={10} xs={12}>\n               <Button disabled={!canLogin}\n                  className=\"login-button-margin login-font-size input-size\" block\n                  variant=\"primary\" onClick={(e)=>handleLogin(e)}>\n                  Sign In\n               </Button>\n            </Col>\n            <Col md={1} xs={0}/>\n         </Row>\n         <Row>\n            <Col sm={12}>\n               <Button \n                  variant=\"light\"\n                  className=\"text-primary link-style\" block\n                  onClick={()=>dispatch(setPage(PAGE.SIGN_UP))}>\n                  Don't have an account? Create one now.\n               </Button>\n            </Col>\n         </Row>\n         </Card.Footer>   \n      </Card>\n      {\n         loginState === LOGIN_STATE.LOGIN_REQUESTED &&\n         <Loading />\n      }\n      </>\n   );\n}\n\nexport default Login;","import React, { useState, useEffect } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { Input, FormFeedback, Spinner, Row, Col } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { requestAllUsernames, requestRegister, requestLogin, setPage } from \"../../redux/actions/connectActions\";\nimport { SIGN_UP_STATE, PAGE } from \"../../redux/storeConstants\";\nimport { ALERT_MSG_TIME, EMPTY } from \"../../views/App\";\n\nlet beginEdit = false;\n\nconst isExisting = (username, allUsernames) => {\n   return allUsernames.includes(username);\n}\n\nconst SignUpPage = () => {\n   const [username, setUsername] = useState(EMPTY);\n   const [password1, setPassword1] = useState(EMPTY);\n   const [password2, setPassword2] = useState(EMPTY);\n   const [showAlert, setShowAlert] = useState(false);\n\n   const registerStatus = useSelector(state => state.user.registerStatus);\n   console.log(\"Sign up page:\", registerStatus);\n   const existingUsernames = useSelector(state => state.user.existingUsernames);\n   const dispatch = useDispatch();\n\n   let canSignUp = username.length > 0 && password1.length > 0 && password1 === password2;\n\n   const clearForm = () => {\n      setUsername(EMPTY);\n      setPassword1(EMPTY);\n      setPassword2(EMPTY);\n   }\n\n   const handleSubmit = () => {\n      beginEdit = false;\n      setShowAlert(true);\n   }\n\n   useEffect(() => {\n      dispatch(requestAllUsernames());\n   }, [username, dispatch]);\n\n   useEffect(() => {\n      if (showAlert) {\n         const timer = setTimeout(() => setShowAlert(false), ALERT_MSG_TIME);\n         return () => clearTimeout(timer);\n      }\n   }, [showAlert]);\n\n   const handleSignUp = () => {\n      handleSubmit();\n      dispatch(requestRegister(username, password2));\n      setTimeout(() => {\n         dispatch(requestLogin(username, password2));\n         clearForm();\n      }, ALERT_MSG_TIME);\n   }\n\n   const handleKeyPress = event => {\n      if (event.keyCode === 13) {\n         event.preventDefault();\n         handleSignUp();\n      }\n   }\n\n   const handleAlert = () => {\n      if (!beginEdit) {\n         if (registerStatus === SIGN_UP_STATE.NETWORK_ERROR) {\n            return (\n               <Alert variant=\"danger\">\n                  Unable to connect to the server! Please check your internet connection and try again.\n               </Alert>\n            );\n         } else if (registerStatus === SIGN_UP_STATE.SIGNED_UP_SUCCESS) {\n            return (\n               <Alert variant=\"success\">\n                  Successfully signed up! Directing you to the lobby...\n               </Alert>\n            );\n         }\n      }\n   }\n\n   return (\n      <Card \n         className=\"margin-auto margin-top-4 sign-width\">\n         <Card.Header className=\"text-center text-dark\">\n            <h1>Create your account</h1>\n         </Card.Header>\n         <Card.Body>\n         {\n            showAlert &&\n            <Row className=\"margin-bottom-1\">\n               <Col xl={4} lg={3} sm={0}/>\n               <Col xl={6} lg={9} sm={12}>\n                  {handleAlert()}\n               </Col>\n               <Col xl={2} />\n            </Row>\n         }\n         {\n            registerStatus === SIGN_UP_STATE.SIGNED_UP_REQUESTED &&\n            <Row className=\"margin-bottom-1 margin-auto\">\n               <Col sm={4}/>\n               <Col sm={4}>\n                  <Spinner color=\"success\" style={{width: \"6rem\", height: \"6rem\"}}/>\n               </Col>\n               <Col sm={4}/>\n            </Row>\n         }\n         \n         <Row>\n         <Col sm={1}/>\n            <Col sm={10}>\n               <Input type=\"text\" id=\"username\"\n                      name=\"username\" value={username}\n                      className=\"input-size\"\n                      onKeyUp={e => handleKeyPress(e)}\n                      aria-label=\"input-username\"\n                      valid={username.length > 0 && !isExisting(username, existingUsernames)}\n                      invalid={isExisting(username, existingUsernames)}\n                      onChange={e => {\n                         beginEdit = true;\n                         setUsername(e.target.value);\n                      }}\n                      placeholder=\"Username\"\n               />\n               <FormFeedback valid>Sweet! that username is available </FormFeedback>\n               <FormFeedback>Oh noes! that name is already taken</FormFeedback>\n            </Col>\n            <Col sm={1}/>\n         </Row>\n         <br />\n         <Row>\n            <Col sm={1}/>\n            <Col sm={10}>\n               <Input type=\"password\" id=\"password1\"\n                      className=\"input-size\"\n                      name=\"password\" value={password1}\n                      onKeyUp={e => handleKeyPress(e)}\n                      aria-label=\"input-password\"\n                      placeholder=\"Password\"\n                      onChange={e => {\n                         beginEdit = true;\n                         setPassword1(e.target.value);\n                      }}\n               />\n            </Col>\n            <Col sm={1}/>\n         </Row>\n         <br />\n         <Row>\n            <Col sm={1}/>\n            <Col sm={10}>\n               <Input type=\"password\" id=\"password2\"\n                      className=\"input-size\"\n                      name=\"password\" value={password2}\n                      onKeyUp={e => handleKeyPress(e)}\n                      aria-label=\"input-password\"\n                      placeholder=\"Confirm your password\"\n                      invalid={password2.length > 0 && password1 !== password2}\n                      onChange={e => {\n                         beginEdit = true;\n                         setPassword2(e.target.value);\n                      }}\n               />\n               <FormFeedback>Password doesn't match.</FormFeedback>\n            </Col>\n            <Col sm={1}/>\n         </Row>\n         </Card.Body>\n         <Card.Footer>\n         <Row>\n            <Col sm={1}/>\n            <Col sm={10}>\n               <Button disabled={!canSignUp}\n                  className=\"login-button-margin login-font-size input-size\" block\n                  variant=\"primary\" onClick={()=>handleSignUp()}>\n                  Finish\n               </Button>\n            </Col>\n            <Col sm={1}/>\n         </Row>\n         <Row>\n            <Col sm={12}>\n               <Button variant=\"light\"\n                  className=\"text-primary link-style\" block\n                  onClick={()=>dispatch(setPage(PAGE.LOGIN))}>\n                  Already have an account? Sign in here.\n               </Button>\n            </Col>\n         </Row>\n         </Card.Footer>   \n      </Card>\n   );\n}\n\nexport default SignUpPage;","import React from 'react';\nimport { Card, Col, Row, Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { setPage } from \"../redux/actions/connectActions\";\nimport { PAGE } from \"../redux/storeConstants\";\n\n\nconst InvalidPage = () => {\n   const dispatch = useDispatch();\n\n   return (\n      <Card className=\"text-light margin-auto margin-top-5 login-bg-color\">\n         <Card.Header></Card.Header>\n         <Card.Body>\n            <h1 className=\"text-center\">Invalid Page!</h1>\n            <br/>\n            <Row>\n               <Col sm={4}/>\n               <Col sm={4}>\n                  <Button block variant=\"light\"\n                     onClick={()=>dispatch(setPage(PAGE.LOGIN))}>\n                     Back To Login\n                  </Button>\n               </Col>\n               <Col sm={4}/>\n            </Row>\n         </Card.Body>\n         <Card.Footer></Card.Footer>\n      </Card>\n      \n   )\n}\n\nexport default InvalidPage;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { GAME } from \"../../redux/storeConstants\";\nimport { ModalBody, Modal, Button, ModalFooter } from \"reactstrap\";\nimport { closeGame } from \"../../redux/actions/connectActions\";\n\n\nconst GameOptions = () => {\n    const status = useSelector(state => state.game.status);\n    const dispatch = useDispatch();\n\n    const displayContent = () => {\n        if (status === GAME.WIN) {\n            return <ModalBody>Wooooo, you win!</ModalBody>\n        } else if (status === GAME.LOSE) {\n            return <ModalBody>Game Over, you lose.</ModalBody>\n        }\n    }\n\n    const handleBackToLobby = () => {\n        dispatch(closeGame());\n    }\n\n    return (\n        <Modal centered isOpen={status !== GAME.IN_PROGRESS}>\n            {displayContent()}\n            <ModalFooter>\n                <Button color=\"success\" onClick={() => handleBackToLobby()}>Back Lobby</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nexport default GameOptions;","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-regular-svg-icons\";\n\nconst PlayerIcon = props => {\n   return (\n      <div>\n         <FontAwesomeIcon \n            icon={faFlag} \n            className={\"fa-flag-\" + props.color}\n            style={{\n               fontSize: \"6rem\",\n               display: \"block\", \n               margin: \"auto\" \n            }}/>\n         {/* <Flag size={96} color={props.color}\n                     style={{ display: \"block\", margin: \"auto\" }}/> */}\n         <h1 style={{ textAlign: \"center\" }}>\n            {props.name}\n         </h1>\n      </div>\n   );\n};\n\nexport default PlayerIcon;","import React from 'react';\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport Board from \"./Board\";\nimport { useSelector } from \"react-redux\";\nimport { GAME } from \"../../redux/storeConstants\";\nimport GameOptions from \"./GameOptions\";\nimport PlayerIcon from './PlayerIcon';\n\nconst Game = () => {\n   const pair = useSelector(state => state.game.pair);\n   const mines = useSelector(state => state.game.mines);\n   const status = useSelector(state => state.game.status);\n   const color = useSelector(state => state.game.color);\n   const pairColor = useSelector(state => state.game.pairColor);\n\n   return (\n      <Card className=\"game-width\">\n         <Card.Header className=\"text-center display-4\">\n            {\"Mines: \" + mines}\n         </Card.Header>\n         <Card.Body>\n            <Row>\n               <Col md={4} xs={5}>\n                  <PlayerIcon color={color} name='ME'/>\n               </Col>\n               <Col md={4} xs={2}/>\n               <Col md={4} xs={5}>\n                  <PlayerIcon color={pairColor} name={pair}/>\n               </Col>\n            </Row>\n            <div className=\"game\">\n               <Board/>\n            </div>\n            {\n               status !== GAME.IN_PROGRESS &&\n               <GameOptions />\n            }\n         </Card.Body>\n         <Card.Footer className=\"game-footer-font\">\n            <p>{\"Left click -> Reveal\"}</p>\n            <p>{\"First Right click -> Flag\"}</p>\n            <p>{\"Second Right click -> Unflag\"}</p>\n         </Card.Footer>\n      </Card>\n   );\n};\n\nexport default Game;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Slide = props => \n    <div className={\"slide-\" + props.slideStatus} >\n        {props.children}\n    </div>\n\nexport default Slide;\n\nSlide.propTypes = {\n    slideStatus: PropTypes.oneOf([\"active\", \"inactive\"]).isRequired,\n    children: PropTypes.node.isRequired\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SlideIndicator = props => \n    <button className=\"indicator\" onClick={props.clickHandler} >\n        <div className={\"circle indicator-\" + props.slideStatus}></div>\n    </button>\n\n\nexport default SlideIndicator;\n\nSlideIndicator.propTypes = {\n    clickHandler: PropTypes.func.isRequired,\n    slideStatus: PropTypes.oneOf([\"active\", \"inactive\"]).isRequired\n}","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Slide from \"./Slide\";\nimport SlideIndicator from \"./SlideIndicator\";\nimport { setOnboarding } from \"../../redux/actions/connectActions\";\n\nconst TOTAL_SLIDES = 3;\n\nconst OnboardingSlides = () => {\n    const [activeSlide, setActiveSlide] = useState(1);\n\n    const self = useSelector(state => state.user.user.username);\n    const dispatch = useDispatch();\n\n    const setSlideState = id => {\n        if (id === activeSlide)\n            return \"active\";\n        return \"inactive\";\n    }\n\n    const nextSlide = () => {\n        let id = activeSlide;\n        id < TOTAL_SLIDES ? setActiveSlide(id + 1) : dispatch(setOnboarding(self, true));\n    }\n\n    const generateSlideIndicators = () => {\n        let indicators = [];\n        for (let i = 1; i <= TOTAL_SLIDES; i++) {\n            indicators.push(\n                <SlideIndicator slideStatus={setSlideState(i)} key={i} \n                                slideID={i} \n                                clickHandler={() => setActiveSlide(i)} />\n            )\n        }\n        return indicators;\n    }\n\n    return (\n        <div className=\"slides-bg\">\n            <Slide slideStatus={setSlideState(1)} slideId={1}>\n                <h3>Feel bored? Find online players to play with the minesweeper game.</h3>\n                <div className=\"fit my-4\">\n                    <img src={process.env.PUBLIC_URL + \"/onboarding1.png\"}\n                        className=\"img-fluid my-4 float-right fit\" alt=\"Find online players to play with the minesweeper game.\" />\n                </div>\n            </Slide>\n            <Slide slideStatus={setSlideState(2)} slideId={2}>\n                <h3>Send invitation to your interested parterners.</h3>\n                <p>If the other player is unfortunately offline when requesting, you would be declined automatically.</p>\n                <div className=\"fit my-4\">\n                    <img src={process.env.PUBLIC_URL + \"/onboarding2.png\"}\n                         className=\"img-fluid\"\n                         alt=\"Click on the Send Invitation button would request game with the player.\" />\n                </div>\n            </Slide>\n            <Slide slideStatus={setSlideState(3)} slideId={3}>\n                <h3>Minesweeper Expert? Two-player game now.</h3>\n                <p>Block: show the number of mines adjacent to the block</p>\n                <p>Flag: Put a flag in a zone when you have confirmed that there is a mine.</p>\n                <p>**Important: this time you can unflag your parterner's if you have a more cautious conclusion.</p>\n                <div className=\"fit my-4\">\n                    <img src={process.env.PUBLIC_URL + \"/onboarding3.png\"}\n                         className=\"img-fluid\"\n                         alt=\"The job openings saved by more people would be ranked higher in the result.\" />\n                </div>\n            </Slide>\n            <div className=\"slides-controls\">\n                <button className=\"align-left control-btn\" onClick={() => dispatch(setOnboarding(self, true))}>Skip</button>\n                <div className=\"align-center\">\n                    {generateSlideIndicators()}\n                </div>\n                <button className=\"align-right control-btn\" onClick={nextSlide}>\n                    {\n                        activeSlide < TOTAL_SLIDES ? \"Next\" : \"Done\"\n                    }\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default OnboardingSlides;","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { PLAYER_STATUS } from \"../../redux/storeConstants\";\nimport { sendInvitation } from \"../../redux/actions/connectActions\";\n\nconst getPlayername = (name, target) => {\n    return name === target? \"Me(\" + name + \")\"  : name;\n}\n\nconst Player = props => {\n    const username = useSelector(state => state.user.user.username);\n    const dispatch = useDispatch();\n\n    const displayAction = () => {\n        if (props.player.username !== username) {\n            if (props.player.status === PLAYER_STATUS.PENDING) {\n                    return <Button color=\"warning\" disabled>{props.player.status}</Button>\n            }\n            else if (props.player.status === PLAYER_STATUS.IN_GAME) {\n                return <Button color=\"danger\" disabled>{props.player.status}</Button>\n            }\n            else if (props.player.status === PLAYER_STATUS.AVAILABLE) {\n                    return <Button color=\"success\" onClick={() => invite()}>Send Invitation</Button>\n            }\n        }\n    }\n\n    const invite = () => {\n        dispatch(sendInvitation(username, props.player.username));\n    }\n\n    const displayBorder = () => {\n        if (username === props.player.username) {\n            return \"player-border\";\n        } \n        return \"\";\n    }\n\n    return (\n        <tr className={\"player-info \" + displayBorder()}>\n            <td>{getPlayername(props.player.username, username)}</td>\n            <td>{props.player.win}</td>\n            <td>{props.player.lose}</td>\n            <td>{props.player.status}</td>\n            <td>{\n                displayAction()\n            }</td>\n        </tr>\n    )\n\n}\n\nexport default Player;","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Table, Card, CardHeader } from \"reactstrap\";\nimport Player from \"./Player\";\n\nconst OnlinePlayers = () => {\n    const onlinePlayers = useSelector(state => state.user.onlinePlayers);\n\n    return (\n        <>\n            <Card className=\"online-player-frame\">\n                <Card style={{color: \"rosybrown\"}} className=\"margin-bottom-half\">\n                    <CardHeader tag=\"h3\" className=\"bold text-centered\">ONLINE Players</CardHeader>\n                </Card>\n                <Table className=\"my-2\">\n                    <thead>\n                        <tr>\n                            <th>Player</th>\n                            <th>Win</th>\n                            <th>Lose</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            Object.keys(onlinePlayers).map((player, index) => \n                                <Player key={`player-${index}`} \n                                        player={onlinePlayers[player]} />\n                            )\n                        }\n                    </tbody>\n                </Table>\n            </Card>\n        </>\n    )\n\n}\n\nexport default OnlinePlayers;","import React from \"react\";\nimport { Modal, ModalHeader, ModalBody, Spinner } from \"reactstrap\";\nimport { useSelector } from \"react-redux\";\nimport { INVITATION_STATUS } from \"../../redux/storeConstants\";\n\nconst SendRequest = () => {\n    const self = useSelector(state => state.user.user.username);\n    const invitationTo = useSelector(state => state.invitation.invitationTo);\n    const invitationFrom = useSelector(state => state.invitation.invitationFrom);\n    const invitationStatus = useSelector(state => state.invitation.status);\n    console.log(invitationFrom, \"log from sent request component\");\n\n    const displayContent = () => {\n        switch (invitationStatus) {\n            case INVITATION_STATUS.CONNECT_TO_SERVER:\n                return <ModalBody><Spinner color=\"success\" />Sending your invatation to server ...</ModalBody>\n            case INVITATION_STATUS.WAIT_FOR_RESPONSE:\n                return <ModalBody><span className=\"bold\">{invitationTo}</span> has received your invatation. <br />Waiting for <span className=\"bold\">{invitationTo}</span>'s response.</ModalBody>\n            case INVITATION_STATUS.INVITATION_ACCEPTED:\n                return <ModalBody>Congrats! You paired up with <span className=\"bold\">{invitationTo}</span>. <br />Enjoy the game.</ModalBody>\n            case INVITATION_STATUS.INVITATION_DECLINED:\n                return <ModalBody>Ooops, <span className=\"bold\">{invitationTo}</span> has other plans. <br />Head you to the lobby ^^</ModalBody>\n            default: \n                return \"\";\n        }\n    }\n\n\n    return (\n        <Modal centered isOpen={self === invitationFrom}>\n            <ModalHeader>Sent Invitation</ModalHeader>\n            {displayContent()}\n        </Modal>\n    )\n}\n\nexport default SendRequest;","import React from \"react\";\nimport { Modal, ModalHeader, ModalFooter, Button, ModalBody } from \"reactstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { INVITATION_STATUS } from \"../../redux/storeConstants\";\nimport { acceptInvitation, declineInvitation, startGame, releaseInvitation } from \"../../redux/actions/connectActions\";\n\nconst InvatationNotification = () => {\n    const self = useSelector(state => state.user.user.username);\n    const invitationTo = useSelector(state => state.invitation.invitationTo);\n    const invitationFrom = useSelector(state => state.invitation.invitationFrom);\n    const invitationStatus = useSelector(state => state.invitation.status);\n\n    const dispatch = useDispatch();\n\n    const accept = () => {\n        dispatch(acceptInvitation(invitationFrom));\n        setTimeout(() => dispatch(startGame(invitationFrom, invitationTo)), 1000);\n    }\n\n    const decline = () => {\n        dispatch(declineInvitation(invitationFrom));\n        setTimeout(() => dispatch(releaseInvitation(invitationFrom, invitationTo), 3000));\n    }\n\n    const displayContent = () => {\n        switch (invitationStatus) {\n            case INVITATION_STATUS.RECEIVE_INVITATION:\n                return <ModalBody>You received an invitation from <span className=\"bold\">{invitationFrom}</span>.</ModalBody>\n            case INVITATION_STATUS.INVITATION_ACCEPTED:\n                return <ModalBody>You accepted <span className=\"bold\">{invitationFrom}</span>'s invitation. <br />Head you to the game. Enjoy!</ModalBody>\n            case INVITATION_STATUS.INVITATION_DECLINED:\n                return <ModalBody>You declined <span className=\"bold\">{invitationFrom}</span>'s invitation. Head you to the lobby to find your opponent.</ModalBody>\n            default:\n                return \"\";\n        }\n    }\n\n    return (\n        <Modal centered isOpen={self === invitationTo}>\n            <ModalHeader>New Invitation</ModalHeader>\n            {displayContent()}\n            {\n                invitationStatus === INVITATION_STATUS.RECEIVE_INVITATION &&\n                <ModalFooter>\n                    <Button color=\"success\" onClick={() => accept()}>Accept</Button>{' '}\n                    <Button color=\"secondary\" onClick={() => decline()}>Decline</Button>\n                </ModalFooter>\n            }\n        </Modal>\n    )\n}\n\nexport default InvatationNotification;","import React from \"react\";\nimport { Card, CardBody, CardHeader } from \"reactstrap\";\n\nconst Notification = props => {\n    return (\n        <div>\n            <Card className=\"boarder-color-secondary\">\n                <CardHeader>\n                    {props.notification.type}{\" \"}\n                    {new Date(props.notification.time).toLocaleString()}\n                </CardHeader>\n                <CardBody>\n                    {props.notification.content}\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nexport default Notification;","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Notification from \"./Notification\";\nimport { CardColumns, Card, CardHeader, Badge } from \"reactstrap\";\n\nconst getSortedNotifications = notifications => {\n    return notifications.sort((a,b) => b.time - a.time);\n}\n\nconst SystemNotification = () => {\n    const notifications = useSelector(state => state.user.notifications);\n\n    return (\n        <>\n            <Card body outline className=\"system-notification-frame\">\n                <Card style={{color: \"rosybrown\"}} className=\"margin-bottom-half\">\n                    <CardHeader tag=\"h3\" className=\"bold text-centered\">SYSTEM Notificition</CardHeader>\n                </Card>\n                <Badge color=\"secondary\" className=\"margin-bottom-half\">latest notifications</Badge>\n                <CardColumns className=\"notification-list\">\n                    {\n                        getSortedNotifications(notifications).map((notification, index) => \n                            <Notification key={`msg-${index}`} \n                                          index={index}\n                                          notification={notification} />\n                        )\n                    }\n                </CardColumns>\n            </Card>\n        </>\n    )\n} \n\nexport default SystemNotification;","import React from \"react\";\nimport { Row, Col} from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBomb, faStar, faTrophy } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFlag } from \"@fortawesome/free-regular-svg-icons\";\n\nconst Intro = () => {\n    return (\n        <Row className=\"homepage-intro margin-bottom-1\">\n            <Col md={{size: 10, offset: 1}}>\n                <p><FontAwesomeIcon icon={faBomb} />\n                    <span className=\"left-padding\"><strong>LEFT click</strong> to reveal a zone you regard safe. </span></p>\n                <p><FontAwesomeIcon icon={faFlag} />\n                    <span className=\"left-padding\"><strong>RIGHT click</strong> to put a flag in a zone when you have confirmed that there is a mine.</span></p>\n                <p><FontAwesomeIcon icon={faStar} />\n                    <span className=\"left-padding\"><strong>IMPORTANT</strong>: unflag a zone of pair's if you have different opinions.</span></p>\n                <p><FontAwesomeIcon icon={faTrophy} />\n                    <span className=\"left-padding\"><strong>WIN</strong>: if all unrevealed cells are the same number of remaining mines, you win!</span></p>\n            </Col>\n        </Row>\n    )\n\n}\n\n\nexport default Intro;","import React from \"react\";\nimport OnboardingSlides from \"../onboarding/OnboardingSlides\";\nimport OnlinePlayers from \"./OnlinePlayers\";\nimport { useSelector } from \"react-redux\";\nimport SendRequest from \"./SendRequest\";\nimport InvitationNotification from \"./InvatationNotification\";\nimport { Row, Col} from \"reactstrap\";\nimport SystemNotification from \"./SystemNotification\";\nimport Intro from \"./Intro\";\n\n\nconst Lobby = () => {\n    const self = useSelector(state => state.user.user.username);\n    const invitationFrom = useSelector(state => state.invitation.invitationFrom);\n    const invitationTo = useSelector(state => state.invitation.invitationTo);\n    const onboardingComplete = useSelector(state => state.user.user.onboardingComplete);\n\n    const displayModal = () => {\n        if (self === invitationFrom) {\n            return <SendRequest />\n        } else if (self === invitationTo) {\n            return <InvitationNotification />\n        } else {\n            return \"\";\n        }\n    }\n\n    return (\n        onboardingComplete?\n        <>\n            <Row>\n                <Col>\n                    <Intro />\n                </Col>\n            </Row>\n            <Row>\n                <Col xs=\"12\" md=\"5\">\n                    <SystemNotification />\n                </Col>\n                <Col xs=\"12\" md=\"7\">\n                    <OnlinePlayers />\n                    {displayModal()}\n                </Col>\n            </Row>\n        </>\n        :\n        <OnboardingSlides />\n    )\n}\n\n\nexport default Lobby;","import React, { useState } from \"react\";\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser, faInfo, faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logout, setOnboarding } from \"../../redux/actions/connectActions\";\n\nconst Menu = () => {\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const self = useSelector(state => state.user.user.username);\n    const dispatch = useDispatch();\n\n    const handleLogout = () => {\n        dispatch(logout(self));\n    }\n\n    const handleHelp = () => {\n        dispatch(setOnboarding(self, false));\n    }\n\n    return (\n        <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n            <DropdownToggle caret>\n                <FontAwesomeIcon icon={faBars} />\n                <span className=\"left-padding\">Menu</span>\n            </DropdownToggle>\n            <DropdownMenu>\n                <DropdownItem onClick={() => handleHelp()}>\n                    <FontAwesomeIcon icon={faInfo} />\n                    <span className=\"left-padding\">Help</span>\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem onClick={() => handleLogout()}>\n                    <FontAwesomeIcon icon={faUser} />\n                    <span className=\"left-padding\">Logout</span>\n                </DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n      );\n}\n\nexport default Menu;","\nimport React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-regular-svg-icons\";\nimport { useSelector } from \"react-redux\";\nimport { PAGE } from \"../redux/storeConstants\";\nimport Menu from \"./lobby/Menu\";\n\nconst Header = () => {\n    const page = useSelector(state => state.user.page);\n\n    return (\n        <Row className=\"homepage-header text-left\">\n            <Col xs=\"12\" md=\"9\">\n                <h4><FontAwesomeIcon className=\"fa-flag-header\" icon={faFlag} />\n                    <span className=\"left-padding\">Minesweep!</span>\n                </h4>\n            </Col>\n            <Col xs=\"6\" md=\"3\" align=\"right\" className=\"menu\">\n                {\n                    page === PAGE.LOBBY &&\n                    <Menu />\n                }\n            </Col>\n            <Col xs=\"12\">\n                <hr />\n            </Col>\n        </Row>\n    )\n}\n\n\nexport default Header;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { PAGE } from \"../redux/storeConstants\";\nimport LoginPage from \"../components/login/LoginPage\";\nimport SignUpPage from \"../components/login/SignUpPage\";\nimport InvalidPage from \"../components/InvalidPage\";\nimport Game from \"../components/game/Game\";\nimport Lobby from \"../components/lobby/Lobby\";\nimport Header from \"../components/Header\";\n\nconst App = () => {\n  const page = useSelector(state => state.user.page);\n\n  const display = () => {\n    switch(page) {\n      case PAGE.SIGN_UP:\n        return <SignUpPage />;\n      case PAGE.LOBBY:\n        return <Lobby />;\n      case PAGE.GAME:\n        return <Game />;\n      case PAGE.INVALID:\n        return <InvalidPage />;\n      default:\n      case PAGE.LOGIN:\n        return <LoginPage />;\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {display()}\n    </>\n  );\n};\n\nexport default App;\nexport const ALERT_MSG_TIME = 2000;\nexport const EMPTY = \"\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport App from './views/App';\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <Provider store={store}>\n      <App/>\n   </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}